JUMP HOST

SSH Jump Server — это обычный сервер Linux, доступный из интернета, который используется в качестве шлюза для доступа к другим машинам Linux в частной сети с использованием протокола SSH. Иногда SSH Jump Server также называют jump host или bastion host. Назначение SSH Jump Server — быть единственным шлюзом для доступа к вашей инфраструктуре, уменьшая размер потенциальной поверхности атаки. Наличие выделенной точки доступа SSH также упрощает ведение сводного журнала аудита всех SSH подключений.

Почему бы не использовать термин SSH-proxy? Отчасти по историческим причинам. В первые дни использования SSH пользователям приходилось подключаться по SSH к Jump Server, а оттуда им приходилось снова вводить ssh, чтобы «перейти» к хосту назначения. Сегодня это делается автоматически, и Teleport фактически использует термин SSH-proxy для описания этой функции.



Одной из хороших практик информационной безопасности будет использование выделенного SSH Jump-сервера, то есть отказаться от размещения на нём какое-либо другого общедоступного программного обеспечения. Кроме того, нужно запретить пользователям напрямую входить на jump-сервер. Вот парочка причин:

Чтобы предотвратить непреднамеренное обновление конфигурации jump-сервера

Чтобы исключить возможность использования jump-сервера для других задач

Также неплохо изменить порт TCP по умолчанию на сервере перехода SSH с 22 на другой.












BASTION HOST

То же самое в компьютерных сетях. Например, перед защищённой компьютерной сетью ставится специальный сервер, через который пробрасывается SSH-туннель в свою частную сеть. Данный «бастион» организуется в соответствии с концепцией нулевого доверия, которая предполагает абсолютное недоверие ко всем объектам и пользователям как снаружи организации, так и внутри неё.

Есть несколько вариантов, как технически организовать такую схему. Можно всё сделать самому, а можно использовать готовые сервисы SaaS, которые решают эту задачу.

Узлы-бастионы используются для разных целей, в том числе:

как веб-сервер,
DNS-сервер,
почтовый сервер (например, SMTP),
FTP-сервер,
прокси,
NNTP-сервер,
ловушка (honeypot),
VPN-сервер,
и др.

Если узел используется для доступа к частной сети, его также называют джамп-сервером.

Джамп-сервер (jump server) предоставляет доступ к сервисам внутренней инфраструктуры. Соответственно, для всех внешних (а то и внутренних) пользователей доступ к этим внутренним сервисам осуществляется только через бастион. В принципе, тут нет ничего сложного, а типичные решения для организации SSH-туннелей хорошо описаны на Хабре. Более конкретную инструкцию см. в статье «Помощь друзьям с использованием OSS для удалённого администрирования при наличии публичного IP-адреса».











WIREGUARD

WireGuard ® — это чрезвычайно простой, но быстрый и современный VPN, использующий современную криптографию . Он стремится быть быстрее , проще , компактнее и полезнее, чем IPsec, и при этом избежать огромной головной боли. Он намерен быть значительно более производительным, чем OpenVPN. WireGuard разработан как VPN общего назначения для работы как на встроенных интерфейсах, так и на суперкомпьютерах и подходит для самых разных обстоятельств. Первоначально выпущенный для ядра Linux, теперь он является кроссплатформенным (Windows, macOS, BSD, iOS, Android) и широко развертывается. В настоящее время оно находится в стадии активной разработки, но уже сейчас может считаться самым безопасным, простым в использовании и простым VPN-решением в отрасли.









VPN

VPN, или виртуальная частная сеть, создает частное сетевое подключение между устройствами с помощью Интернета. Сети VPN используются для безопасной и анонимной передачи данных по публичным сетям. Принцип их работы заключается в маскировании IP-адресов пользователей и шифровании данных, в результате чего пользователи, не имеющие разрешения на получение таких данных, не смогут их прочесть.




В чем состоит принцип работы VPN?
VPN-подключение перенаправляет пакеты данных от вашего компьютера к другому удаленному серверу, перед тем как отправить их третьим лицам в Интернете. Далее представлены основные принципы, лежащие в основе технологии VPN.

Протокол туннелирования
Виртуальная частная сеть в основном создает безопасный тоннель передачи данных между вашим локальным компьютером и другим VPN-сервером в местоположении, которое находится за тысячи километров. Когда вы выходите в Интернет, этот VPN-сервер становится источником всех ваших данных. Ваш интернет-провайдер и другие третьи лица больше не могут видеть содержимое вашего интернет-трафика.

Шифрование
VPN-протоколы, такие как IPsec, скремблируют ваши данные, перед тем как отправить их по тоннелю передачи данных. IPsec – это пакет протоколов, обеспечивающий безопасность связи по интернет‑протоколу (IP) за счет аутентификации и шифрования всех IP‑пакетов в потоке данных. VPN-сервис выступает в роли фильтра, превращая данные в непригодные для чтения на одном конце и подлежащие расшифровке только на другом конце. Это позволяет предотвратить ненадлежащее использование данных, даже если ваше сетевое подключение будет скомпрометировано. Сетевой трафик больше не является уязвимым к атакам, и ваше подключение к Интернету защищено.













TCPDUMP


Захват пакетов SSH с указанием интерфейса

    На конкретном интерфейсе:

    bash

sudo tcpdump -i eth0 port 22

Здесь -i eth0 указывает tcpdump использовать интерфейс eth0. Параметр port 22 указывает фильтрацию пакетов, использующих порт 22, который обычно используется для SSH.

Этот командный вариант захватывает только пакеты, проходящие через указанный интерфейс eth0.

С указанием направления:

bash

    sudo tcpdump -i eth0 src port 22
    sudo tcpdump -i eth0 dst port 22

        src port 22 захватывает пакеты, исходящие с порта 22.
        dst port 22 захватывает пакеты, направленные на порт 22.

Захват пакетов SSH на интерфейсе any

    Интерфейс any:

    bash

    sudo tcpdump -i any port 22

    Здесь -i any указывает tcpdump использовать все доступные сетевые интерфейсы. Параметр port 22 указывает фильтрацию пакетов, использующих порт 22, который обычно используется для SSH.

    Этот командный вариант захватывает пакеты, проходящие через любой интерфейс на машине. Это удобно, если вы не уверены, через какой интерфейс проходят пакеты или если пакеты могут проходить через несколько интерфейсов.

Разница между подходами

    Конкретный интерфейс: Указание конкретного интерфейса (например, eth0) позволяет вам захватывать трафик только на этом интерфейсе. Это полезно, если вы хотите проанализировать трафик, проходящий через определенную сетевую карту или подключение.

    Интерфейс any: Использование интерфейса any позволяет захватывать трафик на всех доступных интерфейсах. Это удобно, если пакеты могут проходить через разные интерфейсы, и вы хотите видеть весь трафик в одном захвате.

Пример использования обеих команд в реальной ситуации зависит от вашей цели. Если вы знаете, что трафик проходит через конкретный интерфейс, использование этого интерфейса может быть более эффективным. Если же вы хотите общую картину и не уверены, через какой интерфейс идет трафик, использование интерфейса any даст вам полный обзор.



