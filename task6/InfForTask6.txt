DAEMONS


Вообще демон — это фоновый процесс, который не привязан к терминалу, в котором был запущен. Но как они создаются, как они связаны с другими процессами, как они работают? Об этом мы и поговорим, но сперва давайте узнаем, как работает процесс init и как происходит рождение новых процессов.

Демоны — это фоновые процессы, работающие отдельно от терминала и почти всегда созданные процессом init; обычно они занимаются такими вещами, как сетевые запросы, работой аппаратного обеспечения и прочими заданиями типа “жди и смотри”.

Демоны появляются двумя способами. Их может создать процесс init, либо же они возникают в следущей ситуации: процесс создаёт своего потомка и тут же завершается. Первый случай ясен, но что происходит во втором: как процесс init становится родительским для этих демонов?

Когда вы создаёте процесс-потомок и тут же “убиваете” его родителя, потомок становится процессом-сиротой (не стоит путать с процессом-зомби, например, потомком, который был завершен, но всё ещё ждёт, когда родитель прочтёт его exit-статус). По умолчанию, если процесс становится сиротой, то его “приёмным” родителем становится init. Вот и всё, что делает демонов уникальными!

Основные типы демонов в Linux:

Системные демоны - обеспечивают базовое функционирование ОС, например init, login, syslog, udev.
Сетевые демоны - работают с сетевым стеком, например dhcpcd, networking, ntpd.
Демоны сервисов - предоставляют различные сервисы пользователям, например cups, cron, sshd.
Демоны хранения данных - работают с файловыми системами и устройствами хранения, например rsyslog, smartd.









BASH

Bash-скрипт — это файл, содержащий последовательность команд, которые выполняются программой bash построчно. Он позволяет выполнять ряд действий, таких как переход к определенному каталогу, создание папки и запуск процесса с помощью командной строки.


Сценарии Bash — это мощный и универсальный инструмент для автоматизации задач системного администрирования, управления системными ресурсами и выполнения других рутинных задач в системах Unix/Linux. Некоторые преимущества сценариев оболочки:

Автоматизация: сценарии оболочки позволяют автоматизировать повторяющиеся задачи и процессы, экономя время и снижая риск ошибок, которые могут возникнуть при ручном выполнении.

Портативность: сценарии оболочки можно запускать на различных платформах и операционных системах, включая Unix, Linux, macOS и даже Windows, с помощью эмуляторов или виртуальных машин.

Гибкость: сценарии оболочки легко настраиваются и могут быть легко изменены в соответствии с конкретными требованиями. Их также можно комбинировать с другими языками программирования или утилитами для создания более мощных сценариев.

Доступность. Сценарии оболочки легко писать и не требуют специальных инструментов или программного обеспечения. Их можно редактировать с помощью любого текстового редактора, а в большинстве операционных систем есть встроенный интерпретатор оболочки.

Интеграция: сценарии оболочки можно интегрировать с другими инструментами и приложениями, такими как базы данных, веб-серверы и облачные службы, что позволяет решать более сложные задачи автоматизации и управления системой.

Отладка: сценарии оболочки легко отлаживать, и большинство оболочек имеют встроенные инструменты отладки и сообщения об ошибках, которые помогают быстро выявлять и устранять проблемы.



Скрипты Bash начинаются с шебанга. Шебанг(Shebang) — это комбинация bash # и bang ! за которым следует путь оболочки bash. Это первая строка скрипта. Шебанг говорит оболочке выполнить его через оболочку bash. Shebang — это просто абсолютный путь к интерпретатору bash.

Ниже приведен пример оператора шебанг.

#!/bin/bash



Этот скрипт выполняет следующие действия:

Определяет переменные с путями к лог-файлам Nginx:
LOG_FILE_1 - основной файл логов requests
LOG_FILE_2 - файл, куда будет записываться информация о очистке LOG_FILE_1
LOG_FILE_3 - файл для записи статусов 5xx
LOG_FILE_4 - файл для записи статусов 4xx
Запускает бесконечный цикл:
Проверяет размер LOG_FILE_1, если больше 10240 байт:
Подсчитывает количество строк в файле
Записывает в LOG_FILE_2 информацию об очистке LOG_FILE_1
Очищает LOG_FILE_1
Читает LOG_FILE_1 построчно с помощью цикла read
Извлекает статус HTTP запроса из строки
В зависимости от первой цифры статуса записывает строку в соответствующий файл:
Для 4xx - в LOG_FILE_4
Для 5xx - в LOG_FILE_3
Ждет 5 секунд в цикле
Таким образом осуществляется разделение логов Nginx по статусам ответов и очистка основного файла при достижении заданного размера.


Рассмотрим подробнее отдельные команды в скрипте:

stat -c%s "$LOG_FILE_1"

Команда stat позволяет получить информацию об объекте - в нашем случае об измерении размера файла.
-c%s указывает формат вывода - размер в байтах.
"$LOG_FILE_1" - переменная с путем к файлу для проверки размера.
[ $(stat -c%s "$LOG_FILE_1") -gt 10240]

Сравнивает полученный размер файла со значением 10240.
-gt означает "больше чем".
Если true, то выполняется следующая команда очистки файла.
wc -l < "$LOG_FILE_1"

Команда wc (word count) для подсчета строк в файле.
-l указывает считать только число строк.
< "$LOG_FILE_1" открывает указанный файл для чтения.
echo "информация" >> $LOG_FILE_2

Команда echo для вывода текста.
>> отправляет вывод не в stdout, а дописывает в конец файла $LOG_FILE_2.
$LOG_FILE_1

Очищает содержимое файла перезаписывая пустотой (null).
Таким образом пошагово рассмотрели основные команды, которые используются в скрипте для мониторинга и разделения логов.


2. Чтение из файла

Этот код считывает каждую строку из файла с именем input.txt и выводит ее на терминал. Мы изучим циклы while позже в этой статье.

while read line
do
  echo $line
done < input.txt

В скрипте или функции bash $1 обозначает переданный начальный аргумент, $2 обозначает переданный второй аргумент и так далее.

echo "Hello, $1!"
./hello.sh nikk > > Hello, nikk!


3. Запись в файл:

echo "let's write text." > output.txt


3. Добавление в файл:

echo "More text." >> output.txt
Добавляем текст “More text.” в конец файла output.txt.

4. Перенаправление вывода:

ls > files.txt
Перечисляем файлы в текущем каталоге и записываем вывод в файл с именем files.txt. Таким образом вы можете перенаправить вывод любой команды в файл.

if [ $num -gt 0 ]; then
  echo "$num is positive"
elif [ $num -lt 0 ]; then
  echo "$num is negative"
else
  echo "$num is zero"
fi



-z # строка пуста

-n # строка не пуста

=, (==) # строки равны

!= # строки неравны

-eq # равно

-ne # неравно

-lt,(< ) # меньше

-le,(<=) # меньше или равно

-gt,(>) #больше

-ge,(>=) #больше или равно

! #отрицание логического выражения

-a,(&&) #логическое «И»

-o,(||) # логическое «ИЛИ»




i=1
while [[ $i -le 10 ]] ; do
   echo "$i"
  (( i += 1 ))
done


for i in {1..5}
do
    echo $i
done















SYSTEMD
ystemd запускает сервисы описанные в его конфигурации.
Конфигурация состоит из множества файлов, которые по-модному называют юнитами.

Все эти юниты разложены в трех каталогах:

/usr/lib/systemd/system/ – юниты из установленных пакетов RPM — всякие nginx, apache, mysql и прочее
/run/systemd/system/ — юниты, созданные в рантайме — тоже, наверное, нужная штука
/etc/systemd/system/ — юниты, созданные системным администратором — а вот сюда мы и положим свой юнит.

Юнит представляет из себя текстовый файл с форматом, похожим на файлы .ini Microsoft Windows.

Для создания простейшего юнита надо описать три секции: [Unit], [Service], [Install]

В секции Unit описываем, что это за юнит:
Названия переменных достаточно говорящие:

Описание юнита:
Description=MyUnit

Далее следует блок переменных, которые влияют на порядок загрузки сервисов:

Запускать юнит после какого-либо сервиса или группы сервисов (например network.target):
After=syslog.target
After=network.target
After=nginx.service
After=mysql.service

Для запуска сервиса необходим запущенный сервис mysql:
Requires=mysql.service

Для запуска сервиса желателен запущенный сервис redis:
Wants=redis.service

В итоге переменная Wants получается чисто описательной.
Если сервис есть в Requires, но нет в After, то наш сервис будет запущен параллельно с требуемым сервисом, а не после успешной загрузки требуемого сервиса

В секции Service указываем какими командами и под каким пользователем надо запускать сервис:

Тип сервиса:
Type=simple
(по умолчанию): systemd предполагает, что служба будет запущена незамедлительно. Процесс при этом не должен разветвляться. Не используйте этот тип, если другие службы зависят от очередности при запуске данной службы.

Type=forking
systemd предполагает, что служба запускается однократно и процесс разветвляется с завершением родительского процесса. Данный тип используется для запуска классических демонов.

Также следует определить PIDFile=, чтобы systemd могла отслеживать основной процесс:
PIDFile=/work/www/myunit/shared/tmp/pids/service.pid

Рабочий каталог, он делается текущим перед запуском стартап команд:
WorkingDirectory=/work/www/myunit/current

Пользователь и группа, под которым надо стартовать сервис:
User=myunit
Group=myunit


Переменные окружения:
Environment=RACK_ENV=production

Запрет на убийство сервиса вследствие нехватки памяти и срабатывания механизма OOM:
-1000 полный запрет (такой у sshd стоит), -100 понизим вероятность.
OOMScoreAdjust=-100

Команды на старт/стоп и релоад сервиса

ExecStart=/usr/local/bin/bundle exec service -C /work/www/myunit/shared/config/service.rb --daemon
ExecStop=/usr/local/bin/bundle exec service -S /work/www/myunit/shared/tmp/pids/service.state stop
ExecReload=/usr/local/bin/bundle exec service -S /work/www/myunit/shared/tmp/pids/service.state restart

Тут есть тонкость — systemd настаивает, чтобы команда указывала на конкретный исполняемый файл. Надо указывать полный путь.

Таймаут в секундах, сколько ждать system отработки старт/стоп команд.
TimeoutSec=300


Попросим systemd автоматически рестартовать наш сервис, если он вдруг перестанет работать.
Контроль ведется по наличию процесса из PID файла
Restart=always


В секции [Install] опишем, в каком уровне запуска должен стартовать сервис

Уровень запуска:
WantedBy=multi-user.target

multi-user.target или runlevel3.target соответствует нашему привычному runlevel=3 «Многопользовательский режим без графики. Пользователи, как правило, входят в систему при помощи множества консолей или через сеть»
