IPTABLES

-для упровления взодящими и исходящими пакетами

filer-основная таблица для фильтрации
NAT-для настройки network address translation
Mangle-для спец обработки пакетов
Raw для обхода сист отследивания состояния

-t сменить таблицу
-p change policy
-L просмотр
-A add
-I insert
-D delete
Accept
Drop

можно создавать пользовательские цепочки











DIG

Команда dig (domain information groper) — многофункциональный инструмент для опроса DNS-серверов.
Она позволяет получить больше информации о конкретном домене,
для того чтобы, например, узнать используемые им IP-адреса.

$ dig @сервер доменное.имя тип записи флаги

@cервер — IP-адрес или доменное имя DNS-сервера (если не указано, dig будет обращаться к DNS-серверу, используемому по умолчанию);

доменное.имя — доменное имя интернет-ресурса, о котором необходимо получить информацию;

тип записи — позволяет указать, для какого типа записи необходим вывод, например A, NS, MX или TXT;

флаги — с помощью флагов утилите dig отдаются дополнительные команды; оговаривается, каким должен быть вывод команды (что в нём должно быть, а чего нет).

+short сокращеный вид утиоиты 

-4 — позволяет использовать только IPv4;
-6 — позволяет использовать только IPv6;
-x — предназначена для получения домена по IP;
-f — используется для чтения списка доменов из файла;
-b IP-адрес — позволяет указать исходящий IP-адрес, с которого отправлен запрос к DNS-серверу, полезно, если к компьютеру подключено несколько сетевых карт;
-r — предотвращает чтение настроек из файла ~/.digrc;
-t — позволяет указать тип записи, которую надо получить;
-p — позволяет указать номер порта DNS сервера;
-u — отображает время в секундах вместо миллисекунд.

HEADER — отображает информацию о версии утилиты, ID запроса, полученных ошибках и использованных флагах вывода. Выводится и другая важная информация о количестве запросов, обращений к DNS-серверу и т. д.;
QUESTION SECTION — секция, которая отображает текущий запрос;
ANSWER SECTION — секция, в которой отображается результат обработки созданного запроса (в данном случае это IP-адрес домена).





PING

Утилита ping - это очень простой инструмент для диагностики сети.
Она позволяет проверить доступен удаленный хост или нет и все.
Для этого утилита проверяет, может ли хост отвечать на сетевые запросы с помощью протокола ICMP.

$ ping опции адрес_узла

-4 - использовать только ipv4 (по умолчанию);
-6 - использовать только ipv6;
-A - адаптивный режим, время между отправками пакета адаптируется к времени передачи и приема пакета, но не меньше чем 200мс;
-b - разрешить ping широковещательного адреса;
-с - количество пакетов, которые нужно отправить;
-D - выводить время в виде UNIX timestamp;
-f - режим флуда, в этом режиме пакеты передаются без задержек, может использоваться для совершения DoS атак на отдельные узлы. Количество точек, которые выводит утилита обозначает количество потерянных пакетов;
-i - интервал в секундах между отправкой пакетов;
-I - использовать этот сетевой интерфейс для отправки пакетов;
-l - режим перегрузки, отправляется очень много пакетов и система не следит за ответными пакетами;
-n - не получать домены для ip адресов;
-r - игнорировать таблицы маршрутизации и отправить пакет на указанный интерфейс;
-s - размер одного пакета;
-t - установить TTL вручную;
-v - более подробный вывод.

packets transmitted - отправлено пакетов;
received - получено пакетов;
packet loss - процент потерянных пакетов;
time - обще время работы;
rtt min/avg/max/mdev - минимальное время/среднее время/максимальное время/квадратичное отклонение.









TRACEROUTE

Утилита ping позволяет только определить наличие проблемы, что узел не отвечает,
но как узнать где обрывается соединение? Для этого применяется утилита traceroute.
В этой небольшой инструкции мы рассмотрим как пользоваться traceroute linux,
как понимать ее вывод и определить где же все-таки проблема.
Но сначала рассмотрим, как работает traceroute.


Каждый пакет проходит на своем пути определенное количество узлов, пока достигнет своей цели. 
Причем, каждый пакет имеет свое время жизни. 
Это количество узлов, которые может пройти пакет перед тем, как он будет уничтожен. 
Этот параметр записывается в заголовке TTL, каждый маршрутизатор, 
через который будет проходить пакет уменьшает его на единицу.
При TTL=0 пакет уничтожается, а отправителю отсылается сообщение Time Exceeded.

Команда traceroute linux использует UDP пакеты. 
Она отправляет пакет с TTL=1 и смотрит адрес ответившего узла, 
дальше TTL=2, TTL=3 и так пока не достигнет цели. 
Каждый раз отправляется по три пакета и для каждого из них измеряется время прохождения. 
Пакет отправляется на случайный порт, который, скорее всего, не занят. 
Когда утилита traceroute получает сообщение от целевого узла о том, 
что порт недоступен трассировка считается завершенной.


$ traceroute опции адрес_узла

-4 или -6 - использовать ipv4 или ipv6 протокол;
-I - использовать ICMP пакеты вместо UDP;
-T - использовать TCP пакеты вместо UDP;
-F - не фрагментировать пакеты;
-f - указать TTL с которого нужно начать;
-g - передавать пакет через указанный шлюз;
-i - передавать пакет через указанный интерфейс;
-m - максимальное количество узлов, через которые пройдет пакет;
-q - количество пакетов, отправляемых за раз, по умолчанию три;
-n - не узнавать доменные имена;
-p - указать порт вместо порта по умолчанию;
-w - установить время ожидания ответа от узла, по умолчанию полсекунды;
-r - использовать другой роутер вместо того, что указанный в таблице маршрутизации;
-z - минимальный интервал между пакетами;
-U - использовать UDP с увеличением номера порта;
-UL - использовать протокол UDPLITE;
-D - использовать протокол DCCP;
--mtu - указать размер пакета;
-P - протокол, доступны такие значения: raw, dccp, udplite, udp, tcpconn, tcp, icmp.









NETSTAT

Утилита netstat (от англ. Network Statistics) — это популярный инструмент, приспособленный 
для анализа данных о сети в Linux и других UNIX-подобных операционных системах. 

netstat @опция

-l — выводит на экран все прослушивающиеся сокеты (сочетания IP-адреса и номера порта);
-t — указывает, что нужно показать все TCP-соединения сетевой подсистемы;
-u — указывает, что нужно показать UDP-соединения сетевой подсистемы;
-a — показывает только активные соединения;
-n — вместо названий служб показывает номера портов.
-A	Показывать адреса любых управляющих блоков протокола, связанных с сокетами; используется для отладки.
-i	Показывать состояние автоматически сконфигурированных (auto-configured) интерфейсов. Интерфейсы, статически сконфигурированные в системе, но не найденные во время загрузки, не показываются.
-r	Показать таблицы маршрутизации. При использовании с опцией -s, показывает статистику маршрутизации.
-s	Показать статистическую информацию по протоколам. При использовании с опцией -r, показывает статистику маршрутизации.
-f семейство_адресов	Ограничить показ статистики или адресов управляющих блоков только указанным семейством_адресов, в качестве которого можно указывать:
inet	Для семейства адресов AF_INET, или
unix	Для семейства адресов AF_UNIX.
-I интерфейс	Выделить информацию об указанном интерфейсе в отдельный столбец; по умолчанию (для третьей формы команды) используется интерфейс с наибольшим объемом переданной информации с момента последней перезагрузки системы. В качестве интерфейса можно указывать любой из интерфейсов, перечисленных в файле конфигурации системы, например, emd1 или lo0.
-p имя_протокола	Ограничить показ статистики или адресов управляющих блоков только протоколом с указанным именем_протокола, например, tcp.

можно комбинировать с grep







IP ROUTE

Команда ip route используется для управления IP-маршрутами в операционной системе. 
IP-маршруты определяют, куда сетевой трафик должен быть направлен при 
отправке пакетов на определенные адреса или сети.


add
# ip route add 10.10.3.0/24 dev en0sp3


delete
# ip route delete 10.10.3.0//24 dev en0sp3

change
$ ip route change 10.0.0.0/24 via 192.168.2.1

get
$ ip route get 8.8.8.8


default via 172.31.80.1 dev enX0 proto dhcp src 172.31.87.73 metric 100 
172.31.0.2 via 172.31.80.1 dev enX0 proto dhcp src 172.31.87.73 metric 100 


default via 192.168.1.1 dev eth0:
default - это маршрут по умолчанию, который используется, когда нет более подходящего маршрута для данного назначения.
via 192.168.1.1 - указывает, что трафик для маршрута по умолчанию должен быть отправлен через шлюз с IP-адресом 192.168.1.1.
dev eth0 - указывает, что трафик для маршрута по умолчанию должен быть отправлен через сетевой интерфейс eth0.
192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.100:
192.168.1.0/24 - это сеть назначения, определяемая с помощью префикса /24, что означает, что маршрут применим ко всем адресам в диапазоне от 192.168.1.0 до 192.168.1.255.
dev eth0 - указывает, что трафик для этой сети должен быть отправлен через сетевой интерфейс eth0.
proto kernel - означает, что этот маршрут был добавлен ядром операционной системы (т.е. автоматически).
scope link - означает, что этот маршрут действителен только для локальной сети, напрямую подключенной к этому интерфейсу.
src 192.168.1.100 - указывает, что источником трафика для этого маршрута является IP-адрес 192.168.1.100, который назначен на интерфейс eth0.


ip [OPTION] OBJECT {COMMAND | help} 



Объект

Сокращенная форма

Назначение

link	l	Отображение и изменение сетевых интерфейсов.
address	a
addr	Адрес протокола (IP или IPv6) на устройстве.
addrlabel	addrl	Конфигурация метки для выбора адреса протокола.
neighbour	n
neigh	Отображение и управление соседними объектами (таблица ARP).
route	r	Запись таблицы маршрутизации.
rule	ru	Правило в базе данных политик маршрутизации.
maddress	m
maddr	Многоадресный адрес.
mroute	mr	Запись кэша многоадресной маршрутизации.
tunnel	t	Туннель через IP.
xfrm	x	Фреймворк для протокола IPsec.







PS

Утилита ps одна из самых простых и в то же время часто используемых программ для 
просмотра списка процессов в Linux. Она не поддерживает интерактивный режим, 
зато имеет множество опций для настройки вывода тех или иных параметров процессов в Linux.

$ ps опции

$ ps опции | grep параметр


-A, -e, (a) - выбрать все процессы;
-a - выбрать все процессы, кроме фоновых;
-d, (g) - выбрать все процессы, даже фоновые, кроме процессов сессий;
-N - выбрать все процессы кроме указанных;
-С - выбирать процессы по имени команды;
-G - выбрать процессы по ID группы;
-p, (p) - выбрать процессы PID;
--ppid - выбрать процессы по PID родительского процесса;
-s - выбрать процессы по ID сессии;
-t, (t) - выбрать процессы по tty;
-u, (U) - выбрать процессы пользователя.
Опции форматирования:

-с - отображать информацию планировщика;
-f - вывести максимум доступных данных, например, количество потоков;
-F - аналогично -f, только выводит ещё больше данных;
-l - длинный формат вывода;
-j, (j) - вывести процессы в стиле Jobs, минимум информации;
-M, (Z) - добавить информацию о безопасности;
-o, (o) - позволяет определить свой формат вывода;
--sort, (k) - выполнять сортировку по указанной колонке;
-L, (H)- отображать потоки процессов в колонках LWP и NLWP;
-m, (m) - вывести потоки после процесса;
-V, (V) - вывести информацию о версии;
-H - отображать дерево процессов;


UID - пользователь, от имени которого запущен процесс;
PID - идентификатор процесса;
PPID - идентификатор родительского процесса;
C - процент времени CPU, используемого процессом;
STIME - время запуска процесса;
TTY - терминал, из которого запущен процесс;
TIME - общее время процессора, затраченное на выполнение процессора;
CMD - команда запуска процессора;
LWP - показывает потоки процессора;
PRI - приоритет процесса.
SZ - это размер процесса в памяти;
RSS - реальный размер процесса в памяти;
PSR - ядро процессора, на котором выполняется процесс.
F - флаги, ассоциированные с этим процессом;
S - состояние процесса;
PRI - приоритет процесса в планировщике ядра Linux;
NI - рекомендованный приоритет процесса, можно менять;
ADDR - адрес процесса в памяти;
WCHAN - название функции ядра, из-за которой процесс находится в режиме ожидания.


для auxft
USER - имя пользователя, под которым запущен процесс.
PID - идентификатор процесса.
%CPU - процент использования ЦПУ процессом.
%MEM - процент использования оперативной памяти процессом.
VSZ - виртуальный размер памяти процесса в килобайтах.
RSS - реальный размер памяти процесса в килобайтах.
TTY - терминал, с которым связан процесс (если применимо).
STAT - состояние процесса:
S - спящий
R - выполняющийся
D - невозобновляемый сон
T - остановленный
Z - "зомби"
< - высокий приоритет
N - низкий приоритет
L - заблокирован в памяти
+ - в передней группе процессов
START - время запуска процесса.
TIME - общее процессорное время, использованное процессом.
COMMAND - команда, которая запустила процесс.


Процесс с PID 1 — это первый процесс, запускаемый при инициализации системы. 
Обычно это systemd или init. 
Он управляет остальными процессами в системе и осуществляет инициализацию системы.

ps -t pts/0
Где pts/0 - это терминал, связанный с вашим текущим сеансом. 
Эта команда выведет все процессы, запущенные в этом терминале.













LSOF

В Linux команда lsof (LiSt Open Files) позволяет выводить список всех открытых файлов, 
а в Linux файлами является всё.

lsof [опция][имя_пользователя]

-u файлы открытк конкретным пользоавтелем
-U позволяет вывести все файлы сокетов домена Unix.
-c позволяет вывести сведения о файлах, которые держат открытыми процессы, 
выполняющие команды, имена которых начинаются с заданных символов.
+d позволяет выяснить, какие папки и файлы открыты в некоей директории (но не в её поддиректориях).
-d опция позволяет задать список дескрипторов файлов, разделённых запятой, 
которые надо включить в вывод или исключить из него. 
-p позволяет вывести все файлы, открытые процессом с указанным при вызове команды PID.
-P подавляет, для сетевых файлов, преобразование номеров портов в имена портов.
-i позволяет вывести сведения о файлах, интернет-адреса которых соответствуют заданному адресу.
-t подавляет вывод всей информации за исключением ID процессов. 













SYSTEMCTL

systemctl. Она позволяет управлять основными процессами Linux.

 systemctl
1) название юнита;
2) тип юнита (например, service: служба или демон, mount: точка монтирования, device: устройства);
3) состояние юнита (загружен или нет);
4) обобщенный статус юнита (active: выполняется, inactive: не был запущен, maintenance: требуется внимание администратора);
5) текущий статус (запущен или нет);
6) описание.

status
systemctl status network

start
systemctl start mysql

stop
systemctl stop ntpd

restart
systemctl restart nginx

enable(autostart)
systemctl enable apache

disable
systemctl disable firewalld

restart server
systemctl reboot

